@model VendorModel
@{
    Layout = "~/Views/Shared/_ColumnsTwo.cshtml";
    Html.AddTitleParts(!String.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);

    var canonicalUrlsEnabled = EngineContext.Current.Resolve<SeoSettings>().CanonicalUrlsEnabled;
    if (canonicalUrlsEnabled)
    {
        var vendorUrl = Url.RouteUrl("Vendor", new { SeName = Model.SeName }, this.Request.Url.Scheme);
        Html.AddCanonicalUrlParts(vendorUrl);
    }
}
@using Nop.Core.Domain.Seo;
@using Nop.Core.Infrastructure;
@using Nop.Web.Models.Catalog;
@using Nop.Web.Extensions;
<div class="page vendor-page">
    <div class="page-title">
        <h1>@Model.Name</h1>
    </div>
    <div class="page-body">
        @Html.Widget("vendordetails_top", Model.Id)
        @*description*@
        @if (!String.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="vendor-description">
                @Html.Raw(Model.Description)
            </div>
        }
        <div class="category-toolbar">
            <div class="pager">
                @if (Model.PagingFilteringContext.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
                {
                    <div class="limiter">
                        <span>@T("Catalog.PageSize")</span>
                        @Html.DropDownList("products-pagesize", Model.PagingFilteringContext.PageSizeOptions, new { onchange = "setLocation(this.value);" })
                        <span>@T("Catalog.PageSize.PerPage")</span>
                    </div>
                }
                <div class="pages">
                    @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
                </div>
            </div>
            @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0 ||
                Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
            {
                <div class="sorter">
                    @*view mode*@
                    @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0)
                    {
                        <p class="view-mode">
                            <span>@T("Catalog.ViewMode")</span>
                            @Html.DropDownList("products-viewmode", Model.PagingFilteringContext.AvailableViewModes, new { onchange = "setLocation(this.value);" })
                        </p>
                    }
                    @*sorting*@
                    @if (Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
                    {
                        <div class="sort-by">
                            <span>@T("Catalog.OrderBy")</span>
                            @Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                        </div>
                    }
                    <div class="clearfix"></div>
                </div>
            }
        </div>
        @*product list*@
        @if (Model.Products.Count > 0)
        {
            if (Model.PagingFilteringContext.ViewMode == "list")
            {
            @*list mode*@
            <div class="product-list">
                @foreach (var product in Model.Products)
                {
                    <div class="item-box">
                        @Html.Partial("_ProductBox", product)
                    </div>
                }
            </div>
            }
            else
            {
                @*grid mode*@
                <div class="product-grid">
                    @for (var i = 0; i < Model.Products.Count(); i++)
                    {
                        var product = Model.Products[i];
                        string lastitem = "";

                        if (i % 2 == 0)
                        {
                            lastitem = "odd";
                        }
                        else
                        {
                            lastitem = "even";
                        }

                        <div class="item-box @lastitem">
                            @Html.Partial("_ProductBox", product)
                        </div>
                    }
                </div>
            }
        }
        <div class="category-toolbar">
            <div class="pager">
                @if (Model.PagingFilteringContext.AllowCustomersToSelectPageSize && Model.Products.Count > 0)
                {
                    <div class="limiter">
                        <span>@T("Catalog.PageSize")</span>
                        @Html.DropDownList("products-pagesize", Model.PagingFilteringContext.PageSizeOptions, new { onchange = "setLocation(this.value);" })
                        <span>@T("Catalog.PageSize.PerPage")</span>
                    </div>
                }
                <div class="pages">
                    @Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber")
                </div>
            </div>
            @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0 ||
                Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
            {
                <div class="sorter">
                    @*view mode*@
                    @if (Model.PagingFilteringContext.AllowProductViewModeChanging && Model.Products.Count > 0)
                    {
                        <p class="view-mode">
                            <span>@T("Catalog.ViewMode")</span>
                            @Html.DropDownList("products-viewmode", Model.PagingFilteringContext.AvailableViewModes, new { onchange = "setLocation(this.value);" })
                        </p>
                    }
                    @*sorting*@
                    @if (Model.PagingFilteringContext.AllowProductSorting && Model.Products.Count > 0)
                    {
                        <div class="sort-by">
                            <span>@T("Catalog.OrderBy")</span>
                            @Html.DropDownList("products-orderby", Model.PagingFilteringContext.AvailableSortOptions, new { onchange = "setLocation(this.value);" })
                        </div>
                    }
                    <div class="clearfix"></div>
                </div>
            }
        </div>
        @Html.Widget("vendordetails_bottom", Model.Id)
    </div>
</div>
